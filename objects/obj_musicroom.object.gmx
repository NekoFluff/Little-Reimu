<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Instantiating Options array
music[0] = "Song1";
music[1] = "Song2";
music[2] = "Back";

//optionState = false;
space = 48;
mpos = 0;

desiredX = room_width/2;
centerX = room_width/2;

for (var i = 0; i &lt; array_length_1d(music); i++) {
    positions[i] = desiredX;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var move = 0;
keyUp = keyboard_check_pressed(vk_up);
keyDown = keyboard_check_pressed(vk_down);
keyEnter = keyboard_check_pressed(vk_enter);
keyZ = keyboard_check_pressed(ord("Z"));
keyX = keyboard_check_pressed(ord("X"));

move -= max(keyUp, 0);
move += max(keyDown, 0);

//Move options around
if (obj_menu.menuState == 2){
    if (move != 0){
        mpos += move;
        audio_play_sound(snd_select, 1, false);
        audio_sound_gain(snd_select, global.gameVolume/10, false);//Since this sound is annoyingly loud
        //Wrap music position around
        if (mpos &lt; 0){
            mpos = array_length_1d(music) - 1;
        }
        if (mpos &gt; array_length_1d(music) - 1){
            mpos = 0;
        }
    }
    
    //Select an option
    var select;
    select = max(keyEnter, keyZ, 0);
    if (select == 1){
        scr_musicroom();
        audio_play_sound(snd_pause, 1, false);
        audio_sound_gain(snd_pause, global.gameVolume/10, false);
    }
    
    if (keyX){
        mpos = 2;
        audio_play_sound(snd_cancel, 1, false);
        audio_sound_gain(snd_cancel, global.gameVolume/10, false);//Since this sound is annoyingly loud
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Options
draw_set_halign(fa_middle);
draw_set_valign(fa_middle);
draw_set_font(fnt_menu);
draw_set_color(c_white);

//If Options is selected
if (obj_menu.menuState == 2){
    desiredX = centerX;
    for (i = 0; i &lt; array_length_1d(music); i++){
        positions[i] = positions[i] + max(min(0.5 * (desiredX - positions[i]), 40), -40) 
        if (i == mpos){ // Current selected option
            draw_set_font(fnt_selected);
            draw_set_alpha(1);
            //Outline text
            draw_set_color(c_black);
            draw_text(positions[i]-1, 260 + (i * space), string(music[i]));
            draw_text(positions[i]+1, 260 + (i * space), string(music[i]));
            draw_text(positions[i], 260+1 + (i * space), string(music[i]));
            draw_text(positions[i], 260-1 + (i * space), string(music[i]));
            //Actual text
            draw_set_color(c_white);
            draw_text(positions[i], 260 + (i * space), string(music[i]));
        } else { // Not selected music
            draw_set_font(fnt_menu);
            draw_set_alpha(0.6);
            //Outline text
            draw_set_color(c_black);
            draw_text(positions[i]+1, 264 + (i * space), string(music[i]));
            draw_text(positions[i]-1, 264 + (i * space), string(music[i]));
            draw_text(positions[i], 264+1 + (i * space), string(music[i]));
            draw_text(positions[i], 264-1 + (i * space), string(music[i]));
            //Actual text
            draw_set_color(c_white);
            draw_text(positions[i], 264 + (i * space), string(music[i]));
        }
    }
} else { //If Options not selected
    for (i = 0; i &lt; array_length_1d(music); i++){
        desiredX = 960 * power(-1, i);
        if (desiredX &lt; 0){
            desiredX = -260;
        } else {
            desiredX = 960;
        }
        positions[i] = positions[i] + max(min(0.5 * (desiredX - positions[i]), 40), -40) 
        draw_set_font(fnt_menu);
        draw_set_alpha(0.6);
        //Outline text
        draw_set_color(c_black);
        draw_text(positions[i]+1, 264 + (i * space), string(music[i]));
        draw_text(positions[i]-1, 264 + (i * space), string(music[i]));
        draw_text(positions[i], 264+1 + (i * space), string(music[i]));
        draw_text(positions[i], 264-1 + (i * space), string(music[i]));
        //Actual text
        draw_set_color(c_white);
        draw_text(positions[i], 264 + (i * space), string(music[i]));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
