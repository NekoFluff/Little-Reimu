<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Instantiating menu array
menu[0] = spr_easy;
menu[1] = spr_medium;
menu[2] = spr_hard;
menu[3] = spr_lunatic;
menu[4] = "Back";

space = 108; //Space between text
dpos = 0; //Select position

fadeAlpha = 0;
room_selected = room_menu;

//X_Position for selected option
centerX = room_width/2.75;
for (var i = 0; i &lt; array_length_1d(menu)-1; i++) {
    positions[i] = centerX
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go to selected room
room_goto(room_selected);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Decrement fadeAlpha
if (fadeAlpha &lt; 1){
    alarm[0] = 1;
    fadeAlpha += 0.05;
} else {
    alarm[1] = 30;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Moving menu/selection
var move = 0;
keyUp = keyboard_check_pressed(vk_up);
keyDown = keyboard_check_pressed(vk_down);
keyEnter = keyboard_check_pressed(vk_enter);
keyZ = keyboard_check_pressed(ord("Z"));
keyX = keyboard_check_pressed(ord("X"));

move -= max(keyUp, 0);
move += max(keyDown, 0);

//Move menu around
if (move != 0){
    dpos += move;
    audio_play_sound(snd_select, 1, false);
    audio_sound_gain(snd_select, global.sfxVolume/10, false);
    //Wrap menu position around
    if (dpos &lt; 0){
        dpos = array_length_1d(menu) - 1;
    }
    if (dpos &gt; array_length_1d(menu) - 1){
        dpos = 0;
    }
}

//Select an option
if (global.difficulty == 0){ // If difficulty hasn't been selected
    if (max(keyEnter, keyZ, 0) == 1){
        scr_difficulty();
        if (dpos != 4){
            audio_play_sound(snd_confirm, 1, false);
            audio_sound_gain(snd_confirm, global.sfxVolume/10, false);//Since this sound is annoyingly loud
        } else {
            audio_play_sound(snd_cancel, 1, false);
            audio_sound_gain(snd_cancel, global.sfxVolume/10, false);//Since this sound is annoyingly loud
        }
    }

    if (keyX){
        dpos = 4;
        audio_play_sound(snd_cancel, 1, false);
        audio_sound_gain(snd_cancel, global.sfxVolume/10, false);//Since this sound is annoyingly loud
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the text
draw_set_halign(fa_middle);
draw_set_valign(fa_middle);
draw_set_font(fnt_menu);
draw_set_color(c_white);

for (i = 0; i &lt; array_length_1d(menu); i++){
    // If the image drawn is not 'Back' option (sprites)
    if !(i == 4){ 
        // Draw the currently selected option
        if (i == dpos){
            positions[i] = positions[i] + max(min(0.25 * (centerX - positions[i]), 10), -10) 
            currentDifficulty = draw_sprite_ext(menu[i], 0, positions[i], 8 + (i * space), 0.375, 0.375, 0, c_white, 1);
        // Draw the non-selected options
        
        } else { 
            var targetX = centerX + (room_width/10 * power(-1, i));
            positions[i] = positions[i] + max(min(0.05 * (targetX - positions[i]), 3), -3)
            otherDifficulty = draw_sprite_ext(menu[i], 0, positions[i], 8 + (i * space), 0.375, 0.375, 0, c_white, 0.4);
        }
    // If the image drawn is 'Back' option (text)
    } else {
        // If 'Back' is selected
        if (i == dpos){ 
            draw_set_font(fnt_selected);
            draw_set_alpha(1);
            draw_text(room_width/2, 24 + (i * space), string(menu[i]));
        // If 'Back' is not selected
        } else { 
            draw_set_font(fnt_menu);
            draw_set_alpha(0.4);
            draw_text(room_width/2, 24 + (i * space), string(menu[i]));
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw fade out
if (fadeAlpha &lt; 1){
    fadeScreen = draw_sprite_ext(spr_blackscreen, 0, 1, 1, 1, 1, 0, c_white, fadeAlpha);
} else {
    fadeScreen = draw_sprite_ext(spr_blackscreen, 0, 1, 1, 1, 1, 0, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
