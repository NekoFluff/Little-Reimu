<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Instantiating Yes/No variable states
Yes = true;
No = false;
choiceNo = 0;
askUser = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Choose which scene to display
global.sceneNum = 0;

// Instantiating keys
keyZ = keyboard_check_pressed(ord("Z"));
keyEnter = keyboard_check_pressed(vk_enter);

switch(global.sceneNum){
    case 0: // Introduction
        timeline_index = scene_intro;
        timeline_position = 0;
        timeline_running = true;
        break;
    case 1:
        timeline_index = scene_1_1;
        timeline_position = 0;
        timeline_running = true;
        break;
    case 2:
        timeline_index = scene_1_2;
        timeline_position = 0;
        timeline_running = true;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Checks which option is selected
keyLeft = keyboard_check_pressed(vk_left);
keyRight = keyboard_check_pressed(vk_right);

if (askUser){
    // Selection on key press
    // Combinations of csYes and key press
    if (Yes &amp;&amp; keyRight){
        Yes = false;
        No = true;
    }
    
    else if (Yes &amp;&amp; keyLeft){
        Yes = false;
        No = true;
    }
    
    // Combinations of csNo and key press
    else if (No &amp;&amp; keyLeft){
        Yes = true;
        No = false;
    }
    
    else if (No &amp;&amp; keyRight){
        Yes = true;
        No = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move to pause room / Skip picture
keyEscape = keyboard_check_pressed(vk_escape);
keyEnter = keyboard_check_pressed(vk_enter);

if (keyEscape){
    var width = surface_get_width(application_surface);
    var height = surface_get_height(application_surface);
    global.ScreenShot = sprite_create_from_surface(application_surface, 0, 0, width, height, false, false, 0, 0);
    room_persistent = true;
    global.RoomBeforePause = room;
    room_goto(room_pauseCutscene);
    audio_pause_sound(global.currentAudio);
}

// Skip to the next picture
if (keyEnter){
    if (timeline_index == scene_intro) {
        if (askUser == false){
                txt.skipLine = true;
        }
    }
    else {
        var tempPosition = timeline_position;
        
        while (tempPosition &gt;= 0){ // Subtract tempPosition by 150 until there's a negative number
            tempPosition -= 150;
        }
        
        timeline_position = timeline_position - tempPosition;
    } 
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
