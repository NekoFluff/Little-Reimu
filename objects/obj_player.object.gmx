<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_static</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-15</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Instantiate variables
draw_set_alpha(1);
playerhit = instance_create(x, y, obj_player_hitbox);
playerhitcenter = instance_create(x, y, obj_player_hitbox_center);
playerhit.image_alpha = 0;
playerhitcenter.image_alpha = 0;
spawnEffectRepeat = 0;
invincible = false;
dyingAnimation = false;
spawnEffectTrigger = 0;

alarm[1] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// stretching player sprite
if (obj_player.image_xscale == 1){
    alarm[1] = -1;
    alarm[0] = 10;
    
} else {
    with (obj_player){
        image_xscale += 0.25;
        image_yscale -= 0.25;
    }
    alarm[1] = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (spawnEffectRepeat &lt;= 40){
    if (spawnEffectRepeat % 2 == 1){
        obj_player.image_alpha = 0.3;
        alarm[0] = 2;
        spawnEffectRepeat++;
    } else {
        obj_player.image_alpha = 1;
        alarm[0] = 8;
        spawnEffectRepeat++;
    }
} else {
    spawnEffectRepeat = 1;
    invincible = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
// Check key presses
keyLeft = keyboard_check(vk_left);
keyRight = keyboard_check(vk_right);
keyUp = keyboard_check(vk_up);
keyDown = keyboard_check(vk_down);
keyShift = keyboard_check(vk_shift);
keyZ = keyboard_check(ord("Z"));
keyEscape = keyboard_check_pressed(vk_escape);

//Player speed
var normalSpeed = 5;
var slowSpeed = 2;

// player spawn blink effect
if (invincible &amp;&amp; spawnEffectTrigger == 1){
    obj_player.image_alpha = 1;
    alarm[0] = 10;
    spawnEffectTrigger = 0;
    spawnEffectRepeat = 1;
}

if (!invincible){
    obj_player.image_alpha = 1;
}

// Character move/shoot on key press
if (!dyingAnimation){
    // Shooting
    if (keyZ &amp;&amp; global.can_shoot &gt; 1){
        if (keyShift){
            pbullet1 = instance_create (obj_player.x, obj_player.y, obj_player_bullet)
            audio_play_sound(snd_shoot, 1, false);
            audio_sound_gain(snd_shoot, global.sfxVolume/10, 0);
            with (pbullet1){
                speed = 30;
                direction = 90;
                image_xscale = 0.3;
                image_yscale = 0.3;
            }
            
            pbullet2 = instance_create (obj_player.x, obj_player.y, obj_player_bullet)
            with (pbullet2){
                speed = 30;
                direction = 85;
                image_xscale = 0.3;
                image_yscale = 0.3;
            }
            
            pbullet3 = instance_create (obj_player.x, obj_player.y, obj_player_bullet)
            with (pbullet3){
                speed = 30;
                direction = 95;
                image_xscale = 0.3;
                image_yscale = 0.3;
            }
        global.can_shoot = -4;
        }
        
        else {
            pbullet1 = instance_create (obj_player.x, obj_player.y, obj_player_bullet)
            audio_play_sound(snd_shoot, 1, false);
            audio_sound_gain(snd_shoot, global.sfxVolume/10, 0);
            with (pbullet1){
                speed = 30;
                direction = 90;
                image_xscale = 0.3;
                image_yscale = 0.3;
            }
            
            pbullet2 = instance_create (obj_player.x, obj_player.y, obj_player_bullet)
            with (pbullet2){
                speed = 30;
                direction = 75;
                image_xscale = 0.3;
                image_yscale = 0.3;
            }
            
            pbullet3 = instance_create (obj_player.x, obj_player.y, obj_player_bullet)
            with (pbullet3){
                speed = 30;
                direction = 105;
                image_xscale = 0.3;
                image_yscale = 0.3;
            }
        global.can_shoot = -2;
        }
    } /*else {
        audio_stop_sound(snd_shoot);
    }*/
    
    if (keyShift){
        playerhit.image_alpha = 1;
        playerhitcenter.image_alpha = 1;
        if (keyLeft &amp;&amp; (obj_player.x &gt; 52)){
            obj_player.x += -slowSpeed;
        }
        
        if (keyRight &amp;&amp; (obj_player.x &lt; 396)){
            obj_player.x += slowSpeed;
        }
        
        if (keyDown &amp;&amp; (obj_player.y &lt; room_height-52)){
            obj_player.y += slowSpeed;
        }
        
        if (keyUp &amp;&amp; (obj_player.y &gt; 52)){
            obj_player.y += -slowSpeed;
        }
    }
    else {
        playerhit.image_alpha = 0;
        playerhitcenter.image_alpha = 0;
        if (keyLeft &amp;&amp; (obj_player.x &gt; 52)){
            obj_player.x += -normalSpeed;
        }
        
        if (keyRight &amp;&amp; (obj_player.x &lt; 396)){
            obj_player.x += normalSpeed;
        }
        
        if (keyDown &amp;&amp; (obj_player.y &lt; room_height-52)){
            obj_player.y += normalSpeed;
        }
        
        if (keyUp &amp;&amp; (obj_player.y &gt; 52)){
            obj_player.y += -normalSpeed;
        }
    }
    // Sprite changes based on key press
    if (!keyLeft &amp;&amp; !keyRight){
        sprite_index = spr_player_static;
        image_speed = 0.4;
    }
    
    if (keyLeft &amp;&amp; keyRight){
        sprite_index = spr_player_static;
        image_speed = 0.4;
    }
    
    else if (keyLeft &amp;&amp; !keyRight &amp;&amp; (obj_player.x &gt; 52)){
        sprite_index = spr_player_left;
        image_speed = 0.2;
        //image_speed = 0;
    }
           
    else if (keyRight &amp;&amp; !keyLeft &amp;&amp; (obj_player.x &lt; 396)){
        sprite_index = spr_player_right ;
        image_speed = 0.2;
        //image_speed = 0;
    }
    
    else{
        sprite_index = spr_player_static;
        image_speed = 0.3;
    }
}
// player hitbox anchor
playerhit.x = obj_player.x;
playerhit.y = obj_player.y;
playerhitcenter.x = obj_player.x;
playerhitcenter.y = obj_player.y;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause function
if (keyEscape){
    audio_play_sound(snd_pause, 1, false);
    audio_sound_gain(snd_pause, global.sfxVolume/10, false);
    width = surface_get_width(application_surface);
    height = surface_get_height(application_surface);
    global.ScreenShot = sprite_create_from_surface(application_surface, 0, 0, width, height, false, false, 0, 0);
    room_persistent = true;
    global.RoomBeforePause = room;
    room_goto(room_pauseGame);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bullet1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CHECK FOR GRAZE
if (!invincible) {
    with(other) {
        if (hasGrazed == false) {
            global.graze += 1;
            hasGrazed = true;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
